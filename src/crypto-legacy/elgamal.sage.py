

# This file was *autogenerated* from the file elgamal.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 = Integer(21888242871839275222246405745257275088548364400416034343698204186575808495617); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_168698 = Integer(168698); _sage_const_5299619240641551281634865583518297030282874472190772894086521144482721001553 = Integer(5299619240641551281634865583518297030282874472190772894086521144482721001553); _sage_const_16950150798460657717958625567821834550301663161624707787222815936182638968203 = Integer(16950150798460657717958625567821834550301663161624707787222815936182638968203); _sage_const_17777552123799933955779906779655732241715742912184938656739573121738514868268 = Integer(17777552123799933955779906779655732241715742912184938656739573121738514868268); _sage_const_2626589144620713026669568689430873010625803728049924121243784502389097019475 = Integer(2626589144620713026669568689430873010625803728049924121243784502389097019475); _sage_const_12345 = Integer(12345); _sage_const_0 = Integer(0)# Performs elgamal encryption and decryption
# Interface curve is in Edwards form
# Montgomery is needed for internal working

def EdwToMont(x,y):
	u = (Fq(_sage_const_1 )+Fq(y))/(Fq(_sage_const_1 )-Fq(y))
	v = (Fq(_sage_const_1 )+Fq(y))/((Fq(_sage_const_1 )-Fq(y))*Fq(x))
	return u,v
	
def MontToEdw(u,v):
	x = Fq(u)/Fq(v)
	y = (Fq(u)-Fq(_sage_const_1 ))/(Fq(u)+Fq(_sage_const_1 ))
	return x,y
	
# Curve generation	
q = _sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 

Fq = GF(_sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 )['x, y']; (x, y,) = Fq._first_ngens(2)

MontCurve = EllipticCurve(y**_sage_const_2 -(x**_sage_const_3 +_sage_const_168698 *x**_sage_const_2 +x))

print(MontCurve)

Bedw_x = _sage_const_5299619240641551281634865583518297030282874472190772894086521144482721001553 
Bedw_y = _sage_const_16950150798460657717958625567821834550301663161624707787222815936182638968203 

Bmont_x, Bmont_y = EdwToMont(Bedw_x, Bedw_y)
Bmont = MontCurve(Bmont_x, Bmont_y)

# Key generation
sk = _sage_const_3 
pk = _sage_const_3  * Bmont
#print("secret key")
#print(sk)
#print("public key")
#print(pk)

# Message generation
Medw_x = _sage_const_17777552123799933955779906779655732241715742912184938656739573121738514868268 
Medw_y = _sage_const_2626589144620713026669568689430873010625803728049924121243784502389097019475 

Mmont_x, Mmont_y = EdwToMont(Medw_x,Medw_y)
Mmont = MontCurve(Mmont_x, Mmont_y)
print("Mmont:")
print(Mmont)

# Encryption
k = _sage_const_12345 
C1 = k * Bmont
preC2 = (k * pk)
C2 = preC2 + Mmont
#print("C1: ")
#print(C1)
#print("C2: ")
#print(C2)

# Decryption
S = sk * C1
MM = C2 - S
print("MM: ")
print(MM)

#####################
print("Edwards message: ")
print(Medw_x)
print(Medw_y)

PKedw_x, PKedw_y = MontToEdw(pk[_sage_const_0 ], pk[_sage_const_1 ])
print("Edwards public key: ")
print(PKedw_x)
print(PKedw_y)

print("Secret key: ")
print(sk)

print("Randomness: ")
print(k)

C1edw_x, C1edw_y = MontToEdw(C1[_sage_const_0 ], C1[_sage_const_1 ])
print("Edwards ciphertext 1: ")
print(C1edw_x)
print(C1edw_y)
C2edw_x, C2edw_y = MontToEdw(C2[_sage_const_0 ], C2[_sage_const_1 ])
print("Edwards ciphertext 2: ")
print(C2edw_x)
print(C2edw_y)
preC2edw_x, preC2edw_y = MontToEdw(preC2[_sage_const_0 ], preC2[_sage_const_1 ])
print("Edwards preC2: ")
print(preC2edw_x)
print(preC2edw_y)

